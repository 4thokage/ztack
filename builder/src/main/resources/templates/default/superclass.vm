##  Classes available in template
##    object (duplicated as 'objEntity') - the ObjEntity class: See org.apache.cayenne.map.ObjectEntity
##    stringUtils - class for string "helper" functions: See org.apache.cayenne.gen.StringUtils
##    entityUtils - class for entity "helper" functions: See org.apache.cayenne.gen.EntityUtils
##    importUtils - class for import statement management: See org.apache.cayenne.gen.ImportUtils
##    superClassName
##    superPackageName
##    subClassName
##    subPackageName
##    baseClassName
##    basePackageName
##
${importUtils.setPackage($superPackageName)}##
${importUtils.addReservedType("${superPackageName}.${superClassName}")}##
${importUtils.addType("${basePackageName}.${baseClassName}")}##
#foreach( $attr in ${object.DeclaredAttributes} )
$importUtils.addType(${attr.Type})##
#end
#foreach( $rel in ${object.DeclaredRelationships} )
$importUtils.addType(${stringUtils.capitalized($rel.Name)})##
#if(${rel.CollectionType}) 
$importUtils.addType(${rel.CollectionType})##
#end
#end
${importUtils.generate()}

/**
 * ${superClassName}.java was generated by Cayenne.
 *
 * DO NOT EDIT THIS CLASS!
 *
 * ${superClassName}.java WILL be overwritten the next time
 * classes are generated.
 *
 * You WILL lose your changes if you manually edit.
 *
 * DO NOT EDIT THIS CLASS!
 *
 * If you need to make any customizations, use the subclass.
 */
public abstract class ${superClassName} extends ${baseClassName}
{
    private static final long serialVersionUID = 1L;

## Create property names
    // Attribute Keys
#foreach( $attr in ${object.DeclaredAttributes} )
    public static final String ${stringUtils.capitalizedAsConstant($attr.Name)}_PROPERTY = "${attr.Name}";
#end

    // Relationship Keys
#foreach( $rel in ${object.DeclaredRelationships} )
    public static final String ${stringUtils.capitalizedAsConstant($rel.Name)}_RELATIONSHIP_PROPERTY = "${rel.Name}";
#end

    // Primary Keys
#if( $object.DbEntity )
#foreach( $idAttr in ${object.DbEntity.PrimaryKey} )
    public static final String ${stringUtils.capitalizedAsConstant($idAttr.Name)}_PK_COLUMN = "${idAttr.Name}";
#end
#end

## Create attribute set/get methods
    // Attribute Setters/Getters
#foreach( $attr in ${object.DeclaredAttributes} )
#if ("true" != "${object.isReadOnly()}")
    public void set${stringUtils.capitalized($attr.Name)}($importUtils.formatJavaType(${attr.Type}) $stringUtils.formatVariableName(${attr.Name}))
    {
        writeProperty(${stringUtils.capitalizedAsConstant($attr.Name)}_PROPERTY, $stringUtils.formatVariableName(${attr.Name}));
    }
#end
#if ( $importUtils.isBoolean(${attr.Type}) )
	public boolean is${stringUtils.capitalized($attr.Name)}()
	{
        Boolean value = (Boolean)readProperty(${stringUtils.capitalizedAsConstant($attr.Name)}_PROPERTY);
        return (value != null) ? value.booleanValue() : false;
    }
#elseif ( $importUtils.isNonBooleanPrimitive(${attr.Type}) )
    public ${importUtils.formatJavaType($attr.Type)} get${stringUtils.capitalized($attr.Name)}()
    {
        Object value = readProperty(${stringUtils.capitalizedAsConstant($attr.Name)}_PROPERTY);
        return (value != null) ? ($importUtils.formatJavaTypeAsNonBooleanPrimitive(${attr.Type})) value : 0;
    }
#else
    public $importUtils.formatJavaType(${attr.Type}) get${stringUtils.capitalized($attr.Name)}()
    {
        return ($importUtils.formatJavaType(${attr.Type}))readProperty(${stringUtils.capitalizedAsConstant($attr.Name)}_PROPERTY);
    }
#end

#end
##
## Create list add/remove/get methods
    // Relationships
#foreach( $rel in ${object.DeclaredRelationships} )
#if( $rel.ToMany )
#if ( ! $rel.ReadOnly )
    public void addTo${stringUtils.capitalized($rel.Name)}($importUtils.formatJavaType(${rel.TargetEntity.ClassName}) obj)
    {
        addToManyTarget(${stringUtils.capitalizedAsConstant($rel.Name)}_RELATIONSHIP_PROPERTY, obj, true);
    }
    public void removeFrom${stringUtils.capitalized($rel.Name)}($importUtils.formatJavaType(${rel.TargetEntity.ClassName}) obj)
    {
        removeToManyTarget(${stringUtils.capitalizedAsConstant($rel.Name)}_RELATIONSHIP_PROPERTY, obj, true);
    }
#end
    @SuppressWarnings("unchecked")
#if ( ${rel.CollectionType} == "java.util.Map")
    public $importUtils.formatJavaType($rel.CollectionType)<$importUtils.formatJavaType($entityUtils.getMapKeyType($rel)), $importUtils.formatJavaType($rel.TargetEntity.ClassName)> get${stringUtils.capitalized($rel.Name)}()
    {
        return ($importUtils.formatJavaType($rel.CollectionType)<$importUtils.formatJavaType($entityUtils.getMapKeyType($rel)), $importUtils.formatJavaType($rel.TargetEntity.ClassName)>)readProperty(${stringUtils.capitalizedAsConstant($rel.Name)}_RELATIONSHIP_PROPERTY);
    }
#else
    public $importUtils.formatJavaType($rel.CollectionType)<$importUtils.formatJavaType($rel.TargetEntity.ClassName)> get${stringUtils.capitalized($rel.Name)}()
    {
        return ($importUtils.formatJavaType($rel.CollectionType)<$importUtils.formatJavaType($rel.TargetEntity.ClassName)>)readProperty(${stringUtils.capitalizedAsConstant($rel.Name)}_RELATIONSHIP_PROPERTY);
    }
#end
#else
#if ( !${object.isReadOnly()} && !$rel.ReadOnly )
    public void set${stringUtils.capitalized($rel.Name)}(${stringUtils.capitalized($rel.Name)} $stringUtils.formatVariableName(${rel.name}))
    {
        setToOneTarget(${stringUtils.capitalizedAsConstant($rel.Name)}_RELATIONSHIP_PROPERTY, $stringUtils.formatVariableName(${rel.name}), true);
    }
#end

    public ${stringUtils.capitalized($rel.Name)} get${stringUtils.capitalized($rel.Name)}()
    {
        return (${stringUtils.capitalized($rel.Name)})readProperty(${stringUtils.capitalizedAsConstant($rel.Name)}_RELATIONSHIP_PROPERTY);
    }
#end


#end
##
##callback methods
    // Callbacks
#foreach($cbname in ${entityUtils.callbackNames})
    protected abstract void ${cbname}();
#end
}
